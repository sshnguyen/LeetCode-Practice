Your task is to implement a simplified version of a program registering the working hours of contract workers at a facility. All operations that should be supported by this program are described below.

Solving this task consists of several levels. Subsequent levels are opened when the current level is correctly solved. You always have access to the data for the current and all previous levels.

Requirements
Your task is to implement a simplified version of a program registering the working hours of contract workers at a facility. Plan your design according to the level specifications below:

Level 1: The working hours register program should support adding workers to the system, registering the time when workers enter or leave the office and retrieving information about the time spent in the office.
Level 2: The working hours register program should support retrieving statistics about the amount of time that workers spent in the office.
Level 3: The working hours register program should support promoting workers, assigning them new positions and new compensation. The program should also support calculating a worker's salary for a given period.
Level 4: The working hours register program should support setting time periods to be double-paid.
To move to the next level, you need to pass all the tests at this level.

Note
You will receive a list of queries to the system, and the final output should be an array of strings representing the returned values of all queries. Each query will only call one operation.

Level 3
Introduce operations for worker promotion and salary calculation.

PROMOTE <workerId> <newPosition> <newCompensation> <startTimestamp> — should register a new position and new compensation for the workerId. newPosition is guaranteed to be different from the current worker's position. New position and new compensation are active from the moment of the first entering the office after or at startTimestamp. In other words, the first time period of being in office for the newPosition is the first time period that starts after or at startTimestamp. startTimestamp is guaranteed to be greater than timestamp parameter of the last REGISTER call for any worker. If the PROMOTE operation is called repeatedly for the same workerId before they entered the office with the newPosition, nothing happens, and this operation should return "invalid_request". If workerId doesn't exist within the system, nothing happens, and this operation should return "invalid_request". If the worker's promotion was successfully registered, return "success". Note: TOP_N_WORKERS operation should take only the worker's current position into account. GET operation should return the total amount of time across all the worker's past and current positions.
CALC_SALARY <workerId> <startTimestamp> <endTimestamp> — should calculate net salary that workerId has earned for the time period between startTimestamp and endTimestamp. No restrictions are applied to startTimestamp and endTimestamp, except that it is guaranteed that endTimestamp > startTimestamp >= 0. Note that workers are only paid for the time they were present in the office. The amount of time is calculated using finished working sessions only. For any finished working session "sessionStartTimestamp, sessionEndTimestamp" salary is calculated as salary = (sessionEndTimestamp - sessionStartTimestamp) * compensationDuringPeriod. Note, that compensationDuringPeriod may differ for different periods, because workers may be promoted. If workerId doesn't exist within the system, nothing happens and this operation should return an empty string.


Input/Output
[execution time limit] 4 seconds (py3)
[memory limit] 1 GB
[input] array.array.string queriesAn array of queries to the system. It is guaranteed that all the queries parameters are valid: each query calls one of the operations described in the description, all operation parameters are given in the correct format, and all conditions required for each operation are satisfied.Guaranteed constraints:1 ≤ queries.length ≤ 500.
[output] array.stringAn array of strings representing the returned values of queries.