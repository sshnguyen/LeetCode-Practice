1. Clarify Requirements

1.1 Ask Functional Questions (User should be able to?):
What are the core features? (e.g., for a hotel reservation system: searching, booking, cancellations, reviews)
What are the user roles (customers, admins, etc.)?

1.2 Ask Non-Functional Questions:

Performance/latency requirements?

Availability, reliability, scalability, fault tolerance need? for each core functional requirement
  - Usually consistency >> availability

Clarify Data Characteristics:
Read-heavy vs. write-heavy workload?

Expected scale (number of users, need to handle peak load)?


1.3 Define Assumptions and Scope

State your assumptions explicitly (e.g., “Assume 10 million users, with 100k concurrent requests at peak”).
Outline the scope: what’s in and out of scope (only booking and search, or also payment processing and reviews?).

*Then let the interviewer know that you are prioritizing the list of functional and
non functional requirements and ask if there's anything they would like to re-prioritize.

2.Core entities (satisfy functional requirements)
  Tables or Collections

3. API(satisfy functional requirements)
  GET /event/:eventId -> Event & Venue & Performer & List of Tickets
  GET /search?term={term}&locattion={location}&type={type}&date={date} -> Lost of Events
  POST /booking/reserve
    header: sessionToken (userId not in body because it could be modify)
    body:{ticketId}


4. High level designs(satisfy functional requirements)
  Talk about the system components
  *CLIENT
  *CDN CACHE
  *API GATEWAY
  *MICROSERVICES TO SERVE API
  *PRIMARY DATABASE (SQL VS NOSQL)
  *CACHE DATABASE (REDIS)
  *SECONDARY DATABASE(For example ELASTIC search to handle search terms more efficiently)
  *MESSAGING QUEUES (KAFTA)
  *EXTERNAL SERVICES (STRIPE PAYMENT...ect.)

5.Deep dives (satisfy non-functional requirements)
Non-Functional Requirement	What to Consider / Do

*Scalability	- Use load balancers (API Gateway, Nginx, ELB, etc.).
- Scale horizontally (multiple instances) rather than vertically G.
- Use distributed databases and sharding strategies.Splitting large databases into smaller partitions (shards) for horizontal scaling.
- Implement caching (Redis, CDN) for frequently accessed data.
*High Availability (HA)	- Deploy services across multiple regions and availability zones.
- Use database replication (primary-replica or multi-master setup).
- Implement failover mechanisms and automated recovery.
*Low Latency	- Use in-memory storage (Redis, Memcached) for caching.
- Optimize database queries (indexing, partitioning).
- Use asynchronous processing (Kafka, RabbitMQ) for non-essential tasks.
*Consistency vs Availability (CAP Theorem)	- Determine where eventual consistency is acceptable (e.g., chat history sync).
- Ensure strong consistency where needed (e.g., message ordering per chat).
- Use quorum-based writes (e.g., DynamoDB, Cassandra) for balance.
*Reliability & Fault Tolerance	-
- Database read from replicas database
- Design for graceful degradation in case of failures.
*Message Ordering & Delivery Guarantees	- Use message queues (Kafka with partitioning) to ensure ordering.
- Implement exactly-once processing for message delivery.
- Use timestamp-based ordering with vector clocks or Lamport timestamps.
*Data Storage & Retention	- Use a hybrid SQL + NoSQL approach for structured/unstructured data.
- Archive old data in cold storage to reduce DB load.
- Implement proper TTL (Time-to-Live) policies for messages.
*Security	- Use OAuth2 / JWT for authentication.
- Encrypt messages end-to-end (E2EE) where applicable.
- Apply rate limiting and API security measures (WAF, DDoS protection).
Observability (Logging & Monitoring)	- Implement centralized logging (ELK Stack, CloudWatch, Prometheus).
- Use distributed tracing (Jaeger, Zipkin) to track message flows.
- Set up proactive alerts for system health monitoring.





CORE IDEAS TO KEEP IN MIND

* SOLID Principles (Software Design Best Practices)
Single Responsibility: Each class/module should do one thing well.
Open-Closed: Code should be extensible without modifying existing code.
Liskov Substitution: Subtypes should replace their base types without breaking functionality.
Interface Segregation: Don't force classes to implement unused methods.
Dependency Inversion: Depend on abstractions, not concrete implementations.

*CAP Theorem (Distributed Systems)
Consistency: All nodes see the same data at the same time.
Availability: Every request gets a response, even if data is stale.
Partition Tolerance: System continues working despite network failures.
✅ Trade-off: Choose CP (strong consistency, like databases) or AP (high availability, like NoSQL).

*ACID properties ensure data consistency and reliability in database transactions
A - Atomicity (All or Nothing)
C - Consistency (Valid State Before & After Transaction)
I - Isolation (No Dirty Reads/Writes)
D - Durability (Committed Data is Safe)

*CDN & Caching (Performance Optimization)
CDN (Content Delivery Network): Distributes content across multiple geographically spread servers. Improves latency & reduces server load.
Cache: Temporarily stores frequently used data in memory (Redis, Memcached, browser cache, CDN cache) to avoid recomputing/reloading.

*Sharding (Database Scaling Strategy)
Splitting large databases into smaller partitions (shards) for horizontal scaling.
✅ Trade-off: Sharding increases performance, but cross-shard queries are complex.

*Message Queue (Asynchronous Processing)
What? Stores messages in a buffer to be processed asynchronously.
Why? Ensures fault tolerance, decouples services, and prevents system overload.

*Database Replication (Read Scaling & Fault Tolerance)
Primary-Replica: Writes go to the primary, reads go to replicas.
✅ Trade-off: Higher read performance but eventual consistency in replicas.